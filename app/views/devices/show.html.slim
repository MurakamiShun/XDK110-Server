.row
  - @device.sensors.each do |sensor|
    .col-xl-6
      p.h1 = "#{sensor.id}. #{sensor.name}"
      .form-group
        .row
          .col-sm-4
            label.h6 for="interval_for_#{sensor.id}" Update Interval [ms]
            input.form-control type="number" min="100" value="1000" step="100" id="interval_for_#{sensor.id}"
          .col-sm-4
            label.h6 for="samples_for_#{sensor.id}" Samples Count
            input.form-control type="number" min="1" value="100" id="samples_for_#{sensor.id}"
          .col-sm-4
            label.h6 for="threshold_for_#{sensor.id}" Threshold
            input.form-control type="text" id="threshold_for_#{sensor.id}"
        .row
          .col-sm-6
            label.h6 for="date_format_for_#{sensor.id}" Date Format
            input.form-control type="text" id="date_format_for_#{sensor.id}" value="MM/DD/YYYY/ hh:mm:ss"
      canvas id="canvas_for_#{sensor.id}"

      javascript:
        var chart_#{sensor.id} = new Chart($('#canvas_for_#{sensor.id}'), {
          type: 'line',
            data: {
              labels: [],
            datasets: [
                {
                  label: '#{sensor.name}',
                  data: [],
                  borderColor: "rgba(0,255,0,1)",
                  backgroundColor: "rgba(0,0,0,0)",
                  pointRadius: 1
                },
                {
                  label: 'th_#{sensor.name}',
                  data: [],
                  borderColor: "rgba(0,0,0,1)",
                  backgroundColor: "rgba(0,0,0,0)",
                  pointRadius: 0
                }
              ]
            },
            options: {
              animation: false,
              legend: {
                display: false
              },
              scales: {
                xAxes: [{
                  ticks: {
                    autoSkip: true,
                    maxTicksLimit: 5
                  }
                }]
              }
            }
          });

        function date_parser(date, format){
          format = format.replace(/YYYY/, date.getFullYear());
          format = format.replace(/MM/, date.getMonth()+1);
          format = format.replace(/DD/, date.getDate());

          format = format.replace(/hh/, date.getHours());
          format = format.replace(/mm/, date.getMinutes());
          format = format.replace(/ss/, date.getSeconds());
          return format;
        }

        function update_graph_#{sensor.id}(){
          $.get(
            "/api/devices/#{@device.id}/sensors/#{sensor.id}/sensor_values",
            {count: $("#samples_for_#{sensor.id}").val()},
            function(data){
              const time_data = data.map(function(row){
                return date_parser(
                  new Date(row['created_at']),
                  $("#date_format_for_#{sensor.id}").val()
                );
              });
              const value_data = data.map(function(row){return row['value']});

              chart_#{sensor.id}.data.labels = time_data;

              chart_#{sensor.id}.data.datasets[0].data = value_data;

              const threshold = parseFloat($("#threshold_for_#{sensor.id}").val());

              if(Math.max.apply(null, value_data) >= threshold){
                chart_#{sensor.id}.data.datasets[0].borderColor = "rgba(255,0,0,1)";
              } else{
                chart_#{sensor.id}.data.datasets[0].borderColor = "rgba(0,255,0,1)";
              }

              if(!isNaN(threshold)){
                const len = value_data.length;
                chart_#{sensor.id}.data.datasets[1].data = new Array(len).fill(threshold);
              }
              else{
                chart_#{sensor.id}.data.datasets[1].data = [];
              }

              chart_#{sensor.id}.update();
          });
          setTimeout(update_graph_#{sensor.id}, Math.max($("#interval_for_#{sensor.id}").val(),500));
        }

        update_graph_#{sensor.id}();